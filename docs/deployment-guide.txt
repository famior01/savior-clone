1. Test django

```
python manage.py test
```

2. Build container

```
docker build -f Dockerfile \
  -t registry.digitalocean.com/savior/savior:latest 
  -t registry.digitalocean.com/savior/savior:v1 \
  .
```

3. Push Container with 2 tags: latest and random

```
docker push registry.digitalocean.com/savior/savior --all-tags
```

4. Update secrets (if needed)

```
kubectl delete secret savior-prod-secret
kubectl create secret generic savior-prod-secret --from-env-file=fs/.env.prod
```

5. Update Deployment 
```
kubectl apply -f k8s/apps/savior-prod.yaml
```

Add in a rollout strategy:
`imagePullPolicy: Always`


### Four ways (given above) to trigger a deployment rollout (aka update the running pods):
- Forced rollout
Given a `imagePullPolicy: Always`, on your containers you can:

```
kubectl rollout restart deployment/savior-deployment
```

- Image update:
```
kubectl set image deployment/savior-deployment savior=registry.digitalocean.com/savior/savior:latest
```

- Update an Environment Variable (within Deployment yaml):

```
env:
  - name: Version
    value: "abc123"
  - name: PORT
    value: "8002"
```

- Deployment yaml file update:

Change 
```
image: registry.digitalocean.com/savior/savior:latest
```
to
```
image: registry.digitalocean.com/savior/savior:v1 
```
Keep in mind you'll need to change `latest` to any new tag(s) you might have (not just `v1`)
```
kubectl apply -f k8s/apps/savior.yaml
```


6. Roll Update:
```
kubectl rollout status deployment/savior-deployment
```
7. Migrate database

Get a single pod (either method works)

I will use this one
```
export SINGLE_POD_NAME=$(kubectl get pod -l app=savior-deployment -o jsonpath="{.items[0].metadata.name}")
```

or this is more specific to linux
```
export SINGLE_POD_NAME=$(kubectl get pod -l=app=savior-deployment -o NAME | tail -n 1)
```

Then run `migrate.sh` 

```
kubectl exec -it $SINGLE_POD_NAME -- bash /app/migrate.sh
```